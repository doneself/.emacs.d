;; ===============================hippie-expand====================================
;; ===============打开.english-words方式进行补全===============
(find-file-noselect "~/.english-words")
(setq hippie-expand-try-functions-list
      '(
        try-expand-dabbrev-all-buffers
        ;; try-complete-file-name-partially
        ;; try-complete-file-name
        ;; try-expand-all-abbrevs
        ;; try-expand-list
        ;; try-expand-line
        ;; try-expand-dabbrev
        ;; try-expand-dabbrev-from-kill
        ;; try-complete-lisp-symbol-partially
        ;; try-complete-lisp-symbol
        ))
;; ===============打开.english-words方式进行补全===============
;; ;; ================Flexible match expansion======================
;; 取消flex match，会造成匹配项过多
;; (defun try-expand-flexible-abbrev (old)
;;   "Try to complete word using flexible matching.
;; Flexible matching works by taking the search string and then
;; interspersing it with a regexp for any character. So, if you try
;; to do a flexible match for `foo' it will match the word
;; `findOtherOtter' but also `fixTheBoringOrange' and
;; `ifthisisboringstopreadingnow'.
;; The argument OLD has to be nil the first call of this function, and t
;; for subsequent calls (for further possible completions of the same
;; string).  It returns t if a new completion is found, nil otherwise."
;;   (if (not old)
;;       (progn
;;         (he-init-string (he-lisp-symbol-beg) (point))
;;         (if (not (he-string-member he-search-string he-tried-table))
;;             (setq he-tried-table (cons he-search-string he-tried-table)))
;;         (setq he-expand-list
;;               (and (not (equal he-search-string ""))
;;                    (he-flexible-abbrev-collect he-search-string)))))
;;   (while (and he-expand-list
;;               (he-string-member (car he-expand-list) he-tried-table))
;;     (setq he-expand-list (cdr he-expand-list)))
;;   (if (null he-expand-list)
;;       (progn
;;         (if old (he-reset-string))
;;         ())
;;     (progn
;;       (he-substitute-string (car he-expand-list))
;;       (setq he-expand-list (cdr he-expand-list))
;;       t)))
;; (defun he-flexible-abbrev-collect (str)
;;   "Find and collect all words that flex-matches STR.
;; See docstring for `try-expand-flexible-abbrev' for information
;; about what flexible matching means in this context."
;;   (let ((collection nil)
;;         (regexp (he-flexible-abbrev-create-regexp str)))
;;     (save-excursion
;;       (goto-char (point-min))
;;       (while (search-forward-regexp regexp nil t)
;;         ;; Is there a better or quicker way than using
;;         ;; `thing-at-point' here?
;;         (setq collection (cons (thing-at-point 'word) collection))))
;;     collection))
;; (defun he-flexible-abbrev-create-regexp (str)
;;   "Generate regexp for flexible matching of STR.
;; See docstring for `try-expand-flexible-abbrev' for information
;; about what flexible matching means in this context."
;;   (concat "\\b" (mapconcat (lambda (x) (concat "\\w*" (list x))) str "")
;;           "\\w*" "\\b"))
;; (setq hippie-expand-try-functions-list
;;       (cons 'try-expand-flexible-abbrev hippie-expand-try-functions-list))
;; ;; ================Flexible match expansion======================
;; ================hippie-expand in ido====================
(defun my-hippie-expand-completions (&optional hippie-expand-function)
  "Return the full list of possible completions generated by `hippie-expand'.
    The optional argument can be generated with `make-hippie-expand-function'."
  (let ((this-command 'my-hippie-expand-completions)
        (buffer-modified (buffer-modified-p))
        (last-command last-command)
        (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (cl-flet ((ding)) ; avoid the (ding) when hippie-expand exhausts its options.
      (while (progn
               (funcall hippie-expand-function nil)
               (setq last-command 'my-hippie-expand-completions)
               (not (equal he-num -1)))))
    ;; Evaluating the completions modifies the buffer, however we will finish
    ;; up in the same state that we began.
    (set-buffer-modified-p buffer-modified)
    ;; Provide the options in the order in which they are normally generated.
    (delete he-search-string (reverse he-tried-table))))
(defmacro my-ido-hippie-expand-with (hippie-expand-function)
  "Generate an interactively-callable function that offers ido-based completion
    using the specified hippie-expand function."
  `(call-interactively
    (lambda (&optional selection)
      (interactive
       (let ((options (my-hippie-expand-completions ,hippie-expand-function)))
         (if options
             (list (ido-completing-read "Completions: " options)))))
      (if selection
          (he-substitute-string selection t)
        (message "No expansion found")))))
(defun my-ido-hippie-expand ()
  "Offer ido-based completion for the word at point."
  (interactive)
  (my-ido-hippie-expand-with 'hippie-expand))
(global-set-key (kbd "M-/") 'my-ido-hippie-expand)
;; ================hippie-expand in ido====================
;; ;; ===============Bin Chen写的补全单词，但无法使用ido界面==================
;; (setq hippie-expand-try-functions-list
;;       '(;; try-expand-dabbrev
;;         ;; try-expand-dabbrev-all-buffers
;;         try-expand-by-dict))
;; ;; The actual expansion function
;; (defun try-expand-by-dict (old)
;;   ;; old is true if we have already attempted an expansion
;;   (unless (bound-and-true-p ispell-minor-mode)
;;     (ispell-minor-mode 1))
;;   ;; english-words.txt is the fallback dicitonary
;;   (if (not ispell-alternate-dictionary)
;;       (setq ispell-alternate-dictionary (file-truename "~/.emacs.d/.english-words")))
;;   (let ((lookup-func (if (fboundp 'ispell-lookup-words)
;;                          'ispell-lookup-words
;;                        'lookup-words)))
;;     (unless old
;;       (he-init-string (he-lisp-symbol-beg) (point))
;;       (if (not (he-string-member he-search-string he-tried-table))
;;           (setq he-tried-table (cons he-search-string he-tried-table)))
;;       (setq he-expand-list
;;             (and (not (equal he-search-string ""))
;;                  (funcall lookup-func (concat (buffer-substring-no-properties (he-lisp-symbol-beg) (point)) "*")))))
;;     (if (null he-expand-list)
;;         (if old (he-reset-string))
;;       (he-substitute-string (car he-expand-list))
;;       (setq he-expand-list (cdr he-expand-list))
;;       t)
;;     ))
;; (global-set-key (kbd "M-/") 'hippie-expand)
;; ;; ===============Bin Chen写的补全单词，但无法使用ido界面==================
;; ===============================hippie-expand====================================
(provide 'setup_hippie_expand)
